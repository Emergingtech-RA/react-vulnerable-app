name: "end to end devsecops"

on:
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "main" ]


jobs:
  security:
    name: SCA & SAST
    runs-on: ${{ matrix.language == 'swift' && 'macos-latest' || 'ubuntu-latest' }}
    permissions:
      actions: write
      contents: write
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./angular-code/
          args: >
            -Dsonar.organization=emergingtech-ra-org
            -Dsonar.projectKey=emergingtech-ra-org_react-app
            
     



  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: '18.x'

      - name: npm install, build, and test
        env:
          CI: false
        run: |
            cd ./angular-code/black-dashboard-angular/
            npm install
            ng build --if-present

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: node-app
          path: build/

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'stg'
      url: 'https://demo-app-react-staging.azurewebsites.net/'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: node-app

      - name: Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'demo-app-react'
          slot-name: 'staging'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
  zap_scan_DAST:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    name: DAST
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://demo-app-react-staging.azurewebsites.net'
          cmd_options: '-a'


  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [zap_scan_DAST, deploy-to-staging]
    environment:
      name: 'prod'
      url: 'https://demo-app-react.azurewebsites.net/'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: node-app

      - name: Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'demo-app'
          slot-name: Production  # Deploying to the production slot
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_ECACBD4D3D754F6CB84546630B51CE8D }}
          package: .
